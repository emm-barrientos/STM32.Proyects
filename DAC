/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

		GPIOA-> ODR = 0x02;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x04;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x06;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x08;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x0a;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x0c;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x0e;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x10;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x12;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x14;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x16;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x18;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x1a;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x1c;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x1e;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x20;
  	HAL_Delay(200);

		GPIOA-> ODR = 0x22;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x24;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x26;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x28;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x2a;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x2c;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x2e;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x30;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x32;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x34;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x36;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x38;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x3a;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x3c;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x3e;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x40;
  	HAL_Delay(200);

		GPIOA-> ODR = 0x42;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x44;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x46;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x48;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x4a;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x4c;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x4e;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x50;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x52;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x54;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x56;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x58;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x5a;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x5c;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x5e;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x60;
  	HAL_Delay(200);

		GPIOA-> ODR = 0x62;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x64;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x66;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x68;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x6a;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x6c;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x6e;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x70;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x72;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x74;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x76;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x78;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x7a;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x7c;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x7e;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x80;
  	HAL_Delay(200);

		GPIOA-> ODR = 0x82;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x84;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x86;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x88;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x8a;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x8c;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x8e;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x90;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x92;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x94;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x96;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x98;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x9a;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x9c;
  	HAL_Delay(200);
		GPIOA-> ODR = 0x9e;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xa0;
  	HAL_Delay(200);

		GPIOA-> ODR = 0xa2;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xa4;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xa6;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xa8;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xaa;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xac;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xae;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xb0;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xb2;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xb4;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xb6;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xb8;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xba;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xbc;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xbe;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xc0;
  	HAL_Delay(200);

		GPIOA-> ODR = 0xc2;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xc4;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xc6;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xc8;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xca;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xcc;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xce;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xd0;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xd2;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xd4;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xd6;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xd8;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xda;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xdc;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xde;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xe0;
  	HAL_Delay(200);

		GPIOA-> ODR = 0xe2;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xe4;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xe6;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xe8;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xea;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xec;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xee;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xf0;
  	HAL_Delay(200);


		GPIOA-> ODR = 0xf2;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xf4;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xf6;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xf8;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xfa;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xfc;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xfe;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xff;
  	HAL_Delay(200);

		GPIOA-> ODR = 0xfe;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xf4;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xfc;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xfa;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xf8;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xf6;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xf4;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xf2;
  	HAL_Delay(200);
		GPIOA-> ODR = 0xf0;
	HAL_Delay(200);
	GPIOA-> ODR = 0xee;
	HAL_Delay(200);
	GPIOA-> ODR = 0xec;
	HAL_Delay(200);
	GPIOA-> ODR = 0xea;
	HAL_Delay(200);
	GPIOA-> ODR = 0xe8;
	HAL_Delay(200);
	GPIOA-> ODR = 0xe6;
	HAL_Delay(200);
	GPIOA-> ODR = 0xe4;
	HAL_Delay(200);
	GPIOA-> ODR = 0xe2;
	HAL_Delay(200);
	GPIOA-> ODR = 0xe0;
	HAL_Delay(200);

	GPIOA-> ODR = 0xde;
	HAL_Delay(200);
	GPIOA-> ODR = 0xdc;
	HAL_Delay(200);
	GPIOA-> ODR = 0xda;
	HAL_Delay(200);
	GPIOA-> ODR = 0xd8;
	HAL_Delay(200);
	GPIOA-> ODR = 0xd6;
	HAL_Delay(200);
	GPIOA-> ODR = 0xd4;
	HAL_Delay(200);
	GPIOA-> ODR = 0xd2;
	HAL_Delay(200);
	GPIOA-> ODR = 0xd0;
	HAL_Delay(200);
	GPIOA-> ODR = 0xce;
	HAL_Delay(200);
	GPIOA-> ODR = 0xcc;
	HAL_Delay(200);
	GPIOA-> ODR = 0xca;
	HAL_Delay(200);
	GPIOA-> ODR = 0xc8;
	HAL_Delay(200);
	GPIOA-> ODR = 0xc6;
	HAL_Delay(200);
	GPIOA-> ODR = 0xc4;
	HAL_Delay(200);
	GPIOA-> ODR = 0xc2;
	HAL_Delay(200);
	GPIOA-> ODR = 0xc0;
	HAL_Delay(200);

	GPIOA-> ODR = 0xbe;
	HAL_Delay(200);
	GPIOA-> ODR = 0xbc;
	HAL_Delay(200);
	GPIOA-> ODR = 0xba;
	HAL_Delay(200);
	GPIOA-> ODR = 0xb8;
	HAL_Delay(200);
	GPIOA-> ODR = 0xb6;
	HAL_Delay(200);
	GPIOA-> ODR = 0xb4;
	HAL_Delay(200);
	GPIOA-> ODR = 0xb2;
	HAL_Delay(200);
	GPIOA-> ODR = 0xb0;
	HAL_Delay(200);
	GPIOA-> ODR = 0xae;
	HAL_Delay(200);
	GPIOA-> ODR = 0xac;
	HAL_Delay(200);
	GPIOA-> ODR = 0xaa;
	HAL_Delay(200);
	GPIOA-> ODR = 0xa8;
	HAL_Delay(200);
	GPIOA-> ODR = 0xa6;
	HAL_Delay(200);
	GPIOA-> ODR = 0xa4;
	HAL_Delay(200);
	GPIOA-> ODR = 0xa2;
	HAL_Delay(200);
	GPIOA-> ODR = 0xa0;
	HAL_Delay(200);

	GPIOA-> ODR = 0x9e;
	HAL_Delay(200);
	GPIOA-> ODR = 0x9c;
	HAL_Delay(200);
	GPIOA-> ODR = 0x9a;
	HAL_Delay(200);
	GPIOA-> ODR = 0x98;
	HAL_Delay(200);
	GPIOA-> ODR = 0x96;
	HAL_Delay(200);
	GPIOA-> ODR = 0x94;
	HAL_Delay(200);
	GPIOA-> ODR = 0x92;
	HAL_Delay(200);
	GPIOA-> ODR = 0x90;
	HAL_Delay(200);
	GPIOA-> ODR = 0x8e;
	HAL_Delay(200);
	GPIOA-> ODR = 0x8c;
	HAL_Delay(200);
	GPIOA-> ODR = 0x8a;
	HAL_Delay(200);
	GPIOA-> ODR = 0x88;
	HAL_Delay(200);
	GPIOA-> ODR = 0x86;
	HAL_Delay(200);
	GPIOA-> ODR = 0x84;
	HAL_Delay(200);
	GPIOA-> ODR = 0x82;
	HAL_Delay(200);
	GPIOA-> ODR = 0x80;
	HAL_Delay(200);

	GPIOA-> ODR = 0x7e;
	HAL_Delay(200);
	GPIOA-> ODR = 0x7c;
	HAL_Delay(200);
	GPIOA-> ODR = 0x7a;
	HAL_Delay(200);
	GPIOA-> ODR = 0x78;
	HAL_Delay(200);
	GPIOA-> ODR = 0x76;
	HAL_Delay(200);
	GPIOA-> ODR = 0x74;
	HAL_Delay(200);
	GPIOA-> ODR = 0x72;
	HAL_Delay(200);
	GPIOA-> ODR = 0x70;
	HAL_Delay(200);
	GPIOA-> ODR = 0x6e;
	HAL_Delay(200);
	GPIOA-> ODR = 0x6c;
	HAL_Delay(200);
	GPIOA-> ODR = 0x6a;
	HAL_Delay(200);
	GPIOA-> ODR = 0x68;
	HAL_Delay(200);
	GPIOA-> ODR = 0x66;
	HAL_Delay(200);
	GPIOA-> ODR = 0x64;
	HAL_Delay(200);
	GPIOA-> ODR = 0x62;
	HAL_Delay(200);
	GPIOA-> ODR = 0x60;
	HAL_Delay(200);

	GPIOA-> ODR = 0x5e;
	HAL_Delay(200);
	GPIOA-> ODR = 0x5c;
	HAL_Delay(200);
	GPIOA-> ODR = 0x5a;
	HAL_Delay(200);
	GPIOA-> ODR = 0x58;
	HAL_Delay(200);
	GPIOA-> ODR = 0x56;
	HAL_Delay(200);
	GPIOA-> ODR = 0x54;
	HAL_Delay(200);
	GPIOA-> ODR = 0x52;
	HAL_Delay(200);
	GPIOA-> ODR = 0x40;
	HAL_Delay(200);
	GPIOA-> ODR = 0x4e;
	HAL_Delay(200);
	GPIOA-> ODR = 0x4c;
	HAL_Delay(200);
	GPIOA-> ODR = 0x4a;
	HAL_Delay(200);
	GPIOA-> ODR = 0x48;
	HAL_Delay(200);
	GPIOA-> ODR = 0x46;
	HAL_Delay(200);
	GPIOA-> ODR = 0x44;
	HAL_Delay(200);
	GPIOA-> ODR = 0x42;
	HAL_Delay(200);
	GPIOA-> ODR = 0x40;
	HAL_Delay(200);

	GPIOA-> ODR = 0x3e;
	HAL_Delay(200);
	GPIOA-> ODR = 0x3c;
	HAL_Delay(200);
	GPIOA-> ODR = 0x3a;
	HAL_Delay(200);
	GPIOA-> ODR = 0x38;
	HAL_Delay(200);
	GPIOA-> ODR = 0x36;
	HAL_Delay(200);
	GPIOA-> ODR = 0x34;
	HAL_Delay(200);
	GPIOA-> ODR = 0x32;
	HAL_Delay(200);
	GPIOA-> ODR = 0x30;
	HAL_Delay(200);
	GPIOA-> ODR = 0x2e;
	HAL_Delay(200);
	GPIOA-> ODR = 0x2c;
	HAL_Delay(200);
	GPIOA-> ODR = 0x2a;
	HAL_Delay(200);
	GPIOA-> ODR = 0x28;
	HAL_Delay(200);
	GPIOA-> ODR = 0x26;
	HAL_Delay(200);
	GPIOA-> ODR = 0x24;
	HAL_Delay(200);
	GPIOA-> ODR = 0x22;
	HAL_Delay(200);
	GPIOA-> ODR = 0x20;
	HAL_Delay(200);

	GPIOA-> ODR = 0x1e;
	HAL_Delay(200);
	GPIOA-> ODR = 0x1c;
	HAL_Delay(200);
	GPIOA-> ODR = 0x1a;
	HAL_Delay(200);
	GPIOA-> ODR = 0x18;
	HAL_Delay(200);
	GPIOA-> ODR = 0x16;
	HAL_Delay(200);
	GPIOA-> ODR = 0x14;
	HAL_Delay(200);
	GPIOA-> ODR = 0x12;
	HAL_Delay(200);
	GPIOA-> ODR = 0x10;
	HAL_Delay(200);
	GPIOA-> ODR = 0xc0e;
	HAL_Delay(200);
	GPIOA-> ODR = 0x0c;
	HAL_Delay(200);
	GPIOA-> ODR = 0x0a;
	HAL_Delay(200);
	GPIOA-> ODR = 0x08;
	HAL_Delay(200);
	GPIOA-> ODR = 0x06;
	HAL_Delay(200);
	GPIOA-> ODR = 0x04;
	HAL_Delay(200);
	GPIOA-> ODR = 0x02;
	HAL_Delay(200);
	GPIOA-> ODR = 0x00;
	HAL_Delay(200);


    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
